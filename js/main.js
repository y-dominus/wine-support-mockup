// „ÉØ„Ç§„Çµ„Éù „É°„Ç§„É≥ JavaScript - GitHub PagesÂØæÂøúÁâà
class WineSupportApp {
    constructor() {
        this.isGitHubPages = window.location.hostname.includes('github.io');
        this.basePath = this.getBasePath();
        this.initialized = false;
        
        // Áí∞Â¢ÉÊÉÖÂ†±„Çí„É≠„Ç∞Âá∫Âäõ
        console.log('üç∑ „ÉØ„Ç§„Çµ„ÉùÂàùÊúüÂåñ‰∏≠...', {
            isGitHubPages: this.isGitHubPages,
            basePath: this.basePath,
            location: window.location.href
        });
    }

    getBasePath() {
        if (this.isGitHubPages) {
            const pathParts = window.location.pathname.split('/');
            return pathParts.length > 2 ? '/' + pathParts[1] : '';
        }
        return '';
    }

    // „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÂàùÊúüÂåñ
    async init() {
        if (this.initialized) return;

        try {
            // PWAÊ©üËÉΩ„ÅÆÂàùÊúüÂåñ
            await this.initializePWA();
            
            // ÂÖ±ÈÄöUIË¶ÅÁ¥†„ÅÆÂàùÊúüÂåñ
            this.initializeCommonElements();
            
            // „Éö„Éº„Ç∏Âõ∫Êúâ„ÅÆÊ©üËÉΩÂàùÊúüÂåñ
            this.initializePageSpecific();
            
            // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÅÆË®≠ÂÆö
            this.setupEventListeners();
            
            // Sommia AIÊ©üËÉΩ„ÅÆÂàùÊúüÂåñ
            this.initializeSommiaAI();
            
            this.initialized = true;
            console.log('‚úÖ „ÉØ„Ç§„Çµ„ÉùÂàùÊúüÂåñÂÆå‰∫Ü');
            
        } catch (error) {
            console.error('‚ùå ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
        }
    }

    // PWAÊ©üËÉΩ„ÅÆÂàùÊúüÂåñ
    async initializePWA() {
        // Service Worker „ÅÆÁôªÈå≤
        if ('serviceWorker' in navigator) {
            try {
                const registration = await navigator.serviceWorker.register('./sw.js');
                console.log('‚úÖ Service Worker ÁôªÈå≤ÊàêÂäü:', registration);
                
                // Êõ¥Êñ∞„ÉÅ„Çß„ÉÉ„ÇØ
                registration.addEventListener('updatefound', () => {
                    const newWorker = registration.installing;
                    if (newWorker) {
                        newWorker.addEventListener('statechange', () => {
                            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                                this.showUpdateNotification();
                            }
                        });
                    }
                });
            } catch (error) {
                console.log('‚ö†Ô∏è Service Worker ÁôªÈå≤Â§±Êïó:', error);
            }
        }

        // „Éû„Éã„Éï„Çß„Çπ„Éà„ÅÆÂãïÁöÑË®≠ÂÆö
        this.setupDynamicManifest();
    }

    // „Éû„Éã„Éï„Çß„Çπ„Éà„ÅÆÂãïÁöÑË®≠ÂÆö
    setupDynamicManifest() {
        const manifestLink = document.createElement('link');
        manifestLink.rel = 'manifest';
        manifestLink.href = './manifest.json';
        document.head.appendChild(manifestLink);

        // PWA„Ç§„É≥„Çπ„Éà„Éº„É´„Éó„É≠„É≥„Éó„Éà
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            this.deferredPrompt = e;
            this.showInstallPrompt();
        });
    }

    // ÂÖ±ÈÄöUIË¶ÅÁ¥†„ÅÆÂàùÊúüÂåñ
    initializeCommonElements() {
        // „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã„ÅÆÁÆ°ÁêÜ
        this.setupLoadingStates();
        
        // „ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó„ÅÆÂàùÊúüÂåñ
        this.initializeTooltips();
        
        // „É¢„Éº„ÉÄ„É´„ÅÆÂàùÊúüÂåñ
        this.initializeModals();
        
        // „Éï„Ç©„Éº„É†„ÅÆÂàùÊúüÂåñ
        this.initializeForms();
    }

    // „Éö„Éº„Ç∏Âõ∫ÊúâÊ©üËÉΩ„ÅÆÂàùÊúüÂåñ
    initializePageSpecific() {
        const pathname = window.location.pathname;
        
        if (pathname.includes('dashboard')) {
            this.initializeDashboard();
        } else if (pathname.includes('my_cellar')) {
            this.initializeMyCellar();
        } else if (pathname.includes('product_list')) {
            this.initializeProductList();
        } else if (pathname.includes('wine_optimization')) {
            this.initializeWineOptimization();
        }
    }

    // „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÂàùÊúüÂåñ
    initializeDashboard() {
        console.log('üìä „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÊ©üËÉΩ„ÇíÂàùÊúüÂåñ‰∏≠...');
        
        // KPI„Ç´„Ç¶„É≥„Çø„Éº„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        this.animateKPICounters();
        
        // „ÉÅ„É£„Éº„Éà„ÅÆÂàùÊúüÂåñ
        this.initializeCharts();
        
        // „Éï„É≠„Éº„ÉÜ„Ç£„É≥„Ç∞„ÉÅ„É£„ÉÉ„Éà
        this.initializeFloatingChat();
    }

    // „Éû„Ç§„Çª„É©„ÉºÂàùÊúüÂåñ
    initializeMyCellar() {
        console.log('üç∑ „Éû„Ç§„Çª„É©„ÉºÊ©üËÉΩ„ÇíÂàùÊúüÂåñ‰∏≠...');
        // „Éû„Ç§„Çª„É©„ÉºÂõ∫Êúâ„ÅÆÊ©üËÉΩ
    }

    // ÂïÜÂìÅ„É™„Çπ„ÉàÂàùÊúüÂåñ
    initializeProductList() {
        console.log('üì¶ ÂïÜÂìÅ„É™„Çπ„ÉàÊ©üËÉΩ„ÇíÂàùÊúüÂåñ‰∏≠...');
        // ÂïÜÂìÅ„É™„Çπ„ÉàÂõ∫Êúâ„ÅÆÊ©üËÉΩ
    }

    // „ÉØ„Ç§„É≥ÊúÄÈÅ©ÂåñÂàùÊúüÂåñ
    initializeWineOptimization() {
        console.log('ü§ñ AIÊúÄÈÅ©ÂåñÊ©üËÉΩ„ÇíÂàùÊúüÂåñ‰∏≠...');
        // AIÊúÄÈÅ©ÂåñÂõ∫Êúâ„ÅÆÊ©üËÉΩ
    }

    // KPI„Ç´„Ç¶„É≥„Çø„Éº„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
    animateKPICounters() {
        const counters = document.querySelectorAll('.stats-value[data-target]');
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    this.animateNumber(entry.target);
                    observer.unobserve(entry.target);
                }
            });
        });

        counters.forEach(counter => observer.observe(counter));
    }

    // Êï∞ÂÄ§„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
    animateNumber(element) {
        const target = parseFloat(element.dataset.target);
        const prefix = element.dataset.prefix || '';
        const suffix = element.dataset.suffix || '';
        const duration = 2000;
        const startTime = performance.now();

        const animate = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            const easeProgress = 1 - Math.pow(1 - progress, 3);
            
            const currentValue = target * easeProgress;
            let displayValue;
            
            if (target >= 1000) {
                displayValue = Math.floor(currentValue).toLocaleString();
            } else if (target % 1 !== 0) {
                displayValue = currentValue.toFixed(1);
            } else {
                displayValue = Math.floor(currentValue).toString();
            }
            
            element.textContent = prefix + displayValue + suffix;
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };

        requestAnimationFrame(animate);
    }

    // „ÉÅ„É£„Éº„ÉàÂàùÊúüÂåñ
    initializeCharts() {
        if (typeof Chart === 'undefined') {
            console.log('‚ö†Ô∏è Chart.js „ÅåË™≠„ÅøËæº„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
            return;
        }

        // Â£≤‰∏ä„Éà„É¨„É≥„Éâ„ÉÅ„É£„Éº„Éà
        this.initializeSalesChart();
        
        // „ÉØ„Ç§„É≥ÊßãÊàêÊØî„ÉÅ„É£„Éº„Éà
        this.initializeWineCompositionChart();
    }

    // Â£≤‰∏ä„Éà„É¨„É≥„Éâ„ÉÅ„É£„Éº„Éà
    initializeSalesChart() {
        const canvas = document.getElementById('sales-chart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['1Êúà', '2Êúà', '3Êúà', '4Êúà', '5Êúà'],
                datasets: [{
                    label: '„ÉØ„Ç§„É≥Â£≤‰∏ä',
                    data: [180000, 195000, 185000, 218000, 245000],
                    borderColor: '#FF4D00',
                    backgroundColor: 'rgba(255, 77, 0, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Â£≤‰∏äÈáëÈ°çÔºàÂÜÜÔºâ'
                        }
                    }
                }
            }
        });
    }

    // „ÉØ„Ç§„É≥ÊßãÊàêÊØî„ÉÅ„É£„Éº„Éà
    initializeWineCompositionChart() {
        const canvas = document.getElementById('wine-composition-chart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Ëµ§„ÉØ„Ç§„É≥', 'ÁôΩ„ÉØ„Ç§„É≥', '„É≠„Çº', '„Çπ„Éë„Éº„ÇØ„É™„É≥„Ç∞'],
                datasets: [{
                    data: [120000, 98000, 45000, 82000],
                    backgroundColor: [
                        '#DC2626',
                        '#FCD34D', 
                        '#F472B6',
                        '#A7F3D0'
                    ],
                    borderWidth: 2,
                    borderColor: '#ffffff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }

    // „Éï„É≠„Éº„ÉÜ„Ç£„É≥„Ç∞„ÉÅ„É£„ÉÉ„ÉàÂàùÊúüÂåñ
    initializeFloatingChat() {
        const chatButton = document.getElementById('floating-chat-btn');
        const chatWindow = document.getElementById('floating-chat-window');
        
        if (!chatButton || !chatWindow) return;

        chatButton.addEventListener('click', () => {
            chatWindow.classList.toggle('show');
        });

        // „ÉÅ„É£„ÉÉ„ÉàÂ§ñ„ÇØ„É™„ÉÉ„ÇØ„ÅßÈñâ„Åò„Çã
        document.addEventListener('click', (e) => {
            if (!chatWindow.contains(e.target) && !chatButton.contains(e.target)) {
                chatWindow.classList.remove('show');
            }
        });
    }

    // Sommia AIÊ©üËÉΩÂàùÊúüÂåñ
    initializeSommiaAI() {
        console.log('ü§ñ Sommia AIÊ©üËÉΩ„ÇíÂàùÊúüÂåñ‰∏≠...');
        
        // AI„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË°®Á§∫Âà∂Âæ°
        this.setupAIMessages();
        
        // AIÊèêÊ°àÊ©üËÉΩ
        this.setupAISuggestions();
    }

    // AI„É°„ÉÉ„Çª„Éº„Ç∏Ë®≠ÂÆö
    setupAIMessages() {
        // „Éö„Éº„Ç∏„É≠„Éº„ÉâÊôÇ„ÅÆ„Ç¶„Çß„É´„Ç´„É†„É°„ÉÉ„Çª„Éº„Ç∏
        setTimeout(() => {
            this.showSommiaMessage('„Åì„Çì„Å´„Å°„ÅØÔºÅ‰ªäÊó•„ÅÆ„ÉØ„Ç§„É≥Ê•≠Âãô„Çí„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ‰Ωï„Åã„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Çã„Åì„Å®„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü');
        }, 2000);
    }

    // AIÊèêÊ°àË®≠ÂÆö
    setupAISuggestions() {
        // ÂÆöÊúüÁöÑ„Å™ÊèêÊ°àË°®Á§∫Ôºà„Éá„É¢Áî®Ôºâ
        if (window.location.pathname.includes('dashboard')) {
            setTimeout(() => {
                this.showOptimizationSuggestion();
            }, 10000);
        }
    }

    // Sommia„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
    showSommiaMessage(message, type = 'info') {
        const messageElement = document.createElement('div');
        messageElement.className = `sommia-message ${type}`;
        messageElement.innerHTML = `
            <div class="sommia-message-content">
                <img src="${this.getImagePath('sommia.png')}" alt="Sommia" class="sommia-avatar-small">
                <div class="sommia-text">${message}</div>
                <button class="sommia-close" onclick="this.closest('.sommia-message').remove()">&times;</button>
            </div>
        `;
        
        // „É°„ÉÉ„Çª„Éº„Ç∏„Ç®„É™„Ç¢„Å´ËøΩÂä†
        const container = document.body;
        container.appendChild(messageElement);
        
        // Ëá™ÂãïÊ∂àÂéªÔºà10ÁßíÂæåÔºâ
        setTimeout(() => {
            if (messageElement.parentNode) {
                messageElement.remove();
            }
        }, 10000);
    }

    // ÊúÄÈÅ©ÂåñÊèêÊ°àË°®Á§∫
    showOptimizationSuggestion() {
        const suggestion = {
            title: '„ÉØ„Ç§„É≥„É™„Çπ„ÉàÊúÄÈÅ©Âåñ„ÅÆ„ÅîÊèêÊ°à',
            message: 'Â£≤‰∏ä„Éá„Éº„Çø„ÇíÂàÜÊûê„Åó„ÅüÁµêÊûú„ÄÅ3ÈäòÊüÑ„ÅÆÂÖ•Êõø„Åà„ÅßÁ¥Ñ15%„ÅÆÂ£≤‰∏äÂêë‰∏ä„ÅåÊúüÂæÖ„Åß„Åç„Åæ„Åô„ÄÇ',
            action: () => {
                window.location.href = this.getPagePath('wine_optimization.html');
            }
        };

        this.showSommiaMessage(
            `<strong>${suggestion.title}</strong><br>${suggestion.message}<br>
            <button class="btn btn-sm btn-primary" onclick="window.location.href='${this.getPagePath('wine_optimization.html')}'">Ë©≥Á¥∞„ÇíË¶ã„Çã</button>`,
            'suggestion'
        );
    }

    // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
    setupEventListeners() {
        // „Ç∞„É≠„Éº„Éê„É´„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
        window.addEventListener('error', (e) => {
            console.error('„Ç∞„É≠„Éº„Éê„É´„Ç®„É©„Éº:', e.error);
        });

        // Êú™ÂÆüË£ÖÊ©üËÉΩ„ÅÆ„Ç¢„É©„Éº„Éà
        document.addEventListener('click', (e) => {
            if (e.target.matches('a[href="#"], button[data-mock]')) {
                e.preventDefault();
                this.showMockAlert();
            }
        });

        // „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú
        window.addEventListener('resize', () => {
            this.handleResize();
        });
    }

    // „É¢„ÉÉ„ÇØÊ©üËÉΩ„Ç¢„É©„Éº„Éà
    showMockAlert() {
        this.showSommiaMessage('„Åì„ÅÆÊ©üËÉΩ„ÅØ„É¢„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÁâà„ÅÆ„Åü„ÇÅÂÆüË£Ö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇGitHub Pages „ÅßÂÖ¨Èñã‰∏≠„ÅÆ„Éá„É¢Áâà„Åß„Åô„ÄÇ', 'warning');
    }

    // „É™„Çµ„Ç§„Ç∫Âá¶ÁêÜ
    handleResize() {
        // „ÉÅ„É£„Éº„Éà„ÅÆ„É™„Çµ„Ç§„Ç∫Á≠â
        if (window.Chart && window.Chart.instances) {
            Object.values(window.Chart.instances).forEach(chart => {
                chart.resize();
            });
        }
    }

    // „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖãÁÆ°ÁêÜ
    setupLoadingStates() {
        // „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÂÆå‰∫ÜÊôÇ„Å´„É≠„Éº„Éá„Ç£„É≥„Ç∞„ÇíÈùûË°®Á§∫
        window.addEventListener('load', () => {
            const loader = document.querySelector('.page-loader');
            if (loader) {
                loader.style.opacity = '0';
                setTimeout(() => loader.remove(), 300);
            }
        });
    }

    // „ÉÑ„Éº„É´„ÉÅ„ÉÉ„ÉóÂàùÊúüÂåñ
    initializeTooltips() {
        const tooltipElements = document.querySelectorAll('[data-tooltip]');
        tooltipElements.forEach(element => {
            element.addEventListener('mouseenter', this.showTooltip.bind(this));
            element.addEventListener('mouseleave', this.hideTooltip.bind(this));
        });
    }

    // „ÉÑ„Éº„É´„ÉÅ„ÉÉ„ÉóË°®Á§∫
    showTooltip(event) {
        const text = event.target.dataset.tooltip;
        if (!text) return;

        const tooltip = document.createElement('div');
        tooltip.className = 'tooltip';
        tooltip.textContent = text;
        document.body.appendChild(tooltip);

        const rect = event.target.getBoundingClientRect();
        tooltip.style.left = rect.left + rect.width / 2 - tooltip.offsetWidth / 2 + 'px';
        tooltip.style.top = rect.top - tooltip.offsetHeight - 5 + 'px';
    }

    // „ÉÑ„Éº„É´„ÉÅ„ÉÉ„ÉóÈùûË°®Á§∫
    hideTooltip() {
        const tooltip = document.querySelector('.tooltip');
        if (tooltip) {
            tooltip.remove();
        }
    }

    // „É¢„Éº„ÉÄ„É´ÂàùÊúüÂåñ
    initializeModals() {
        document.addEventListener('click', (e) => {
            if (e.target.matches('[data-modal]')) {
                const modalId = e.target.dataset.modal;
                this.openModal(modalId);
            }
            
            if (e.target.matches('.modal-close, .modal-backdrop')) {
                this.closeModal();
            }
        });
    }

    // „É¢„Éº„ÉÄ„É´Èñã„Åè
    openModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }
    }

    // „É¢„Éº„ÉÄ„É´Èñâ„Åò„Çã
    closeModal() {
        const activeModal = document.querySelector('.modal.active');
        if (activeModal) {
            activeModal.classList.remove('active');
            document.body.style.overflow = '';
        }
    }

    // „Éï„Ç©„Éº„É†ÂàùÊúüÂåñ
    initializeForms() {
        const forms = document.querySelectorAll('form[data-ajax]');
        forms.forEach(form => {
            form.addEventListener('submit', this.handleAjaxForm.bind(this));
        });
    }

    // Ajax„Éï„Ç©„Éº„É†Âá¶ÁêÜ
    handleAjaxForm(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);
        
        // „É¢„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÁî®„ÅÆÂá¶ÁêÜ
        this.showSommiaMessage('„Éï„Ç©„Éº„É†„ÅåÈÄÅ‰ø°„Åï„Çå„Åæ„Åó„ÅüÔºà„É¢„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÁâà„ÅÆ„Åü„ÇÅÂÆüÈöõ„ÅÆÂá¶ÁêÜ„ÅØË°å„Çè„Çå„Åæ„Åõ„ÇìÔºâ', 'success');
    }

    // PWA„Ç§„É≥„Çπ„Éà„Éº„É´„Éó„É≠„É≥„Éó„ÉàË°®Á§∫
    showInstallPrompt() {
        const installPrompt = document.createElement('div');
        installPrompt.className = 'install-prompt';
        installPrompt.innerHTML = `
            <div class="install-prompt-content">
                <div class="install-prompt-text">
                    <h3>üì± „ÉØ„Ç§„Çµ„Éù„Çí„Ç§„É≥„Çπ„Éà„Éº„É´</h3>
                    <p>„Éõ„Éº„É†ÁîªÈù¢„Å´ËøΩÂä†„Åó„Å¶„Éç„Ç§„ÉÜ„Ç£„Éñ„Ç¢„Éó„É™„ÅÆ„Çà„ÅÜ„Å´‰ΩøÁî®„Åß„Åç„Åæ„Åô</p>
                </div>
                <div class="install-prompt-actions">
                    <button class="btn btn-primary" id="install-app">„Ç§„É≥„Çπ„Éà„Éº„É´</button>
                    <button class="btn btn-outline-secondary" id="dismiss-install">Âæå„Åß</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(installPrompt);
        
        // „Ç§„É≥„Çπ„Éà„Éº„É´„Éú„Çø„É≥
        document.getElementById('install-app').addEventListener('click', () => {
            if (this.deferredPrompt) {
                this.deferredPrompt.prompt();
                this.deferredPrompt.userChoice.then((choiceResult) => {
                    console.log('„Ç§„É≥„Çπ„Éà„Éº„É´ÈÅ∏Êäû:', choiceResult.outcome);
                    this.deferredPrompt = null;
                });
            }
            installPrompt.remove();
        });
        
        // Âæå„Åß„Éú„Çø„É≥
        document.getElementById('dismiss-install').addEventListener('click', () => {
            installPrompt.remove();
        });
    }

    // Êõ¥Êñ∞ÈÄöÁü•Ë°®Á§∫
    showUpdateNotification() {
        this.showSommiaMessage(
            '„ÉØ„Ç§„Çµ„Éù„ÅÆÊñ∞„Åó„ÅÑ„Éê„Éº„Ç∏„Éß„É≥„ÅåÂà©Áî®ÂèØËÉΩ„Åß„Åô„ÄÇ<br><button class="btn btn-sm btn-primary" onclick="window.location.reload()">Êõ¥Êñ∞</button>',
            'update'
        );
    }

    // „Éë„Çπ„Éò„É´„Éë„ÉºÈñ¢Êï∞
    getImagePath(imagePath) {
        const currentPath = window.location.pathname;
        const isInSubfolder = currentPath.includes('/html/');
        
        if (isInSubfolder) {
            return '../' + imagePath;
        }
        return './' + imagePath;
    }

    getPagePath(pagePath) {
        const currentPath = window.location.pathname;
        const isInSubfolder = currentPath.includes('/html/');
        
        if (isInSubfolder) {
            if (pagePath.startsWith('../')) {
                return pagePath;
            }
            return './' + pagePath;
        }
        return './html/' + pagePath;
    }
}

// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàê
const wineSupportApp = new WineSupportApp();

// DOMË™≠„ÅøËæº„ÅøÂÆå‰∫ÜÂæå„Å´ÂàùÊúüÂåñ
document.addEventListener('DOMContentLoaded', () => {
    wineSupportApp.init();
});

// „Ç∞„É≠„Éº„Éê„É´„Å´Âà©Áî®ÂèØËÉΩ„Å´„Åô„Çã
window.WineSupportApp = wineSupportApp;

// „É¨„Ç¨„Ç∑„Éº„Çµ„Éù„Éº„ÉàÁî®„ÅÆÈñ¢Êï∞
window.trackEvent = (eventName, properties = {}) => {
    console.log('üìä „Ç§„Éô„É≥„Éà:', eventName, properties);
};

// „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÔºà„É¢„Ç∏„É•„Éº„É´ÂØæÂøúÔºâ
if (typeof module !== 'undefined' && module.exports) {
    module.exports = WineSupportApp;
}